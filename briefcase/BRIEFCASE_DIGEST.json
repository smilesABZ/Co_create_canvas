{
  "readme_content": "# Project Briefcase\n\nThis directory serves as a \"briefcase\" to maintain persistent context, track progress, and outline the core concept and features for the Co-Creation Canvas application. It's designed to aid continuity in development, especially across sessions or if conversational context is limited.\n\n## Understanding and Using This Briefcase\n\nFor detailed information on the contents of this briefcase, how to use them, and the protocol for maintaining context (especially with an AI assistant), please refer to:\n\n**[./briefcase_protocol.md](./briefcase_protocol.md)**\n\nThis protocol document is the primary guide for managing and utilizing the project briefcase effectively.\n\n## Core Context Documents\n\nWhile `briefcase_protocol.md` provides the full details, the key documents you'll typically interact with for project context are:\n\n*   **`CONCEPT_PLAN.md`**: Outlines the application's long-term strategic vision and current feature set.\n*   **`PROGRESS_LOG.md`**: A dynamic journal of development progress, current focus, and next steps.\n*   **`AI_COLLABORATION_MODEL.md`**: Defines the interaction model with the AI.\n*   **`BRIEFCASE_DIGEST.json`**: An aggregated JSON of all key briefcase documents for AI ingestion.\n\nThese documents are intended to be updated as the project evolves.",
  "progress_log_content": "# Co-Creation Canvas: Progress Log\n\n## Project Inception Date (Approximate)\nEarly June 2024\n\n## Last Major Milestone / Current State\n*(As of June 04, 2025)*\n-   **Briefcase Protocol Standardization & `FILE_CHANGELOG.md` Removal:** `briefcase_protocol.md` is now the authoritative guide. `FILE_CHANGELOG.md` has been removed due to redundancy.\n-   **Comprehensive Documentation Update:** All core briefcase documents (`README.md`, `CONCEPT_PLAN.md`, `AI_COLLABORATION_MODEL.md`, `briefcase_protocol.md`) and `BRIEFCASE_DIGEST.json` are up-to-date.\n-   **Full Canvas Capture:** AI analysis and image saving features now use the entire logical canvas content.\n-   **Sticky Connectors (Move & Resize):** Connectors remain attached to elements when those elements are moved or resized.\n-   **Edit Mermaid Diagram Functionality:** Users can now edit existing Mermaid diagrams placed on the canvas.\n-   **Save/Load Session Functionality:** Full whiteboard sessions (elements, view, name, AI persona) can be saved to `.ccc` files and loaded.\n-   **Per-Element AI Summaries (Concise):** Automatic, concise (1-2 sentences) AI-generated summaries for new elements, with \"Regenerate\" and \"Show/Hide\" controls. Multimodal for images.\n-   **Google Search Grounding & Prompt Cards:** Gemini can use Google Search, and \"Save Model Card\" includes a history of Gemini interactions.\n\n## Current Focus\n-   **Canvas Zoom Functionality:** Implement zoom in/out for the whiteboard. (Next item from backlog).\n\n## Recent Achievements (Summary of last ~8 major feature sets/updates, most recent first)\n1.  **Briefcase Protocol Standardization & `FILE_CHANGELOG.md` Removal:** Streamlined documentation by making `briefcase_protocol.md` the primary guide and removing the redundant `FILE_CHANGELOG.md`. All briefcase documents updated. (June 04, 2025).\n2.  **Full Canvas Capture for AI/Saving:** Enhanced `getCanvasContentImageBase64` to capture the entire logical canvas, ensuring AI interactions and image exports are comprehensive. (June 2024 - June 2025).\n3.  **Sticky Connectors on Element Resize:** Implemented functionality for connectors to remain correctly attached when elements are resized, complementing existing move stickiness. (June 2024 - June 2025).\n4.  **Edit Mermaid Diagram Functionality:** Added the ability to edit existing Mermaid diagrams on the canvas, updating their appearance and stored syntax. (June 2024 - June 2025).\n5.  **Save/Load Session Functionality:** Implemented comprehensive session persistence, allowing users to save and load their work, including all elements, view state, session name, and AI persona. (June 2024 - June 2025).\n6.  **Per-Element AI Summaries (Concise & Automatic):** Implemented automatic generation of concise (1-2 sentences) AI summaries for new elements, with UI controls for regeneration and visibility. This includes multimodal summaries for images. (June 2024 - June 2025).\n7.  **Google Search Grounding & Prompt Cards in Model Card:** Integrated Google Search grounding for Gemini and enhanced \"Save Model Card\" to include a history of Gemini interactions. (June 2024 - June 2025).\n8.  **Core Drawing, Element, and AI Features:** Initial implementation of drawing tools, element management, AI interaction, Mermaid integration, connector logic (including initial stickiness on move), and export functionalities. (June 2024).\n\n\n## Identified Bugs/Issues (High-Level)\n-   **Undo/Redo:** Full undo/redo stack for all actions is a major missing feature.\n-   **Manual Re-attachment of Free-Floating Connectors:** Re-attaching detached connector endpoints by dragging them to snap targets is not fully implemented.\n-   **Increased API Calls:** Automatic summary generation for each new element will increase API usage.\n-   **Gemini Drawing Precision:** Ongoing refinement may be needed for complex drawing requests.\n-   **Performance with Very Large Canvases:** Optimizations might be needed.\n-   **Mermaid Rendering Timeouts:** More dynamic handling for complex diagrams.\n-   **Text Editing UX:** `ContentBoxEditorModal` is functional; `TextInputOverlay` for shapes is basic.\n\n## Potential Next Steps / Backlog (High-Level - Refer to `CONCEPT_PLAN.md` for a more exhaustive list)\n1.  **Canvas Zoom Functionality:** Implement zoom in/out. (Current Focus).\n2.  **Undo/Redo System:** Implement a robust undo/redo mechanism.\n3.  **Richer Text Editing for `ContentBoxElement`s.**\n4.  **Manual Re-attachment of Connector Endpoints.**\n5.  **Per-Element AI Summaries (UI/UX Refinements).**",
  "concept_plan_content": "# Co-Creation Canvas: Concept Plan\n\n## 1. Application Vision\nA modular, AI-assisted collaborative whiteboard designed for intuitive drawing, diagramming, text handling, and intelligent content generation/analysis via Google Gemini. The focus is on a custom-built, extensible platform where features are implemented directly for learning, fine-grained control, and a unique user experience.\n\n## 2. Core Architecture\n-   **Frontend Framework:** React with TypeScript.\n-   **UI Management:** React components for toolbar, modals, interactive elements.\n-   **State Management:** Custom React hooks for modular functionality:\n    -   `useToolManager`: Manages active tool, colors, stroke widths, fill options, emoji selection, line style (arrow/plain/dotted).\n    -   `useElementManager`: Manages all whiteboard elements (paths, shapes, text, images, connectors, content boxes), selection state, image object loading, and session name.\n    -   `useCanvasView`: Manages canvas panning (viewBox) and coordinate transformations (virtual to viewport and vice-versa).\n    -   `useTextEditing`: Manages state for inline text input overlay (primarily for shape text, less so for new text creation which uses ContentBoxEditorModal).\n    -   `useInteractionManager`: Handles all mouse/touch events on the canvas for drawing, selection, moving, resizing, panning, connector snapping logic, and AI summary button interactions.\n    -   `useGemini`: Manages interaction with Google Gemini (modals, prompts, processing responses, applying drawing commands, AI persona, per-element AI summaries).\n    -   `useFileOperations`: Handles image/text file import, saving canvas as image, generating and saving model cards (including full app screenshots), saving the project briefcase, and saving/loading full whiteboard sessions.\n    -   `useMermaid`: Manages Mermaid diagram input, rendering to canvas, and editing existing Mermaid diagrams.\n-   **Rendering:** Direct HTML5 Canvas API for drawing all visual elements, orchestrated by React state changes and redraw cycles.\n-   **Utilities:** Helper functions for geometry calculations (`geometryUtils.ts`), color manipulation (`colorUtils.ts`), and canvas drawing primitives (`canvasUtils.ts`).\n-   **External Libraries:**\n    -   `@google/genai`: For interacting with the Google Gemini API.\n    -   `JSZip`: For creating ZIP archives for the \"Save Model Card\" and \"Save Briefcase\" features.\n    -   `html2canvas`: For capturing full application screenshots.\n    -   `Mermaid`: For rendering Mermaid syntax diagrams to SVG.\n\n## 3. Key Implemented Features\n-   **Drawing Tools:** Pencil, Eraser, various Flowchart Shapes (Rectangle, Oval, Diamond, Triangle, Parallelogram, Hexagon, Cylinder, Cloud, Star), Arrow/Line (Connector), Emoji Stamp.\n-   **Text Handling:**\n    -   User-created text (via TEXT tool) creates `ContentBoxElement` (editable via `ContentBoxEditorModal`).\n    -   Gemini-generated text also creates `ContentBoxElement`.\n    -   Imported text files create `ContentBoxElement`.\n    -   Text input within Flowchart Shapes (uses `TextInputOverlay`).\n-   **Element Manipulation:** Select, Move, Resize (for shapes, images, emojis, content boxes).\n-   **Connectors:**\n    -   Arrow, plain, or dotted line styles selectable via toolbar toggle.\n    -   Visual Connector Handles on shapes, content boxes, and images.\n    -   Interactive creation from handles with snap targeting to other elements.\n    -   Sticky Connectors: Connectors remain attached to elements when those elements are moved **or resized**.\n    -   Drag-to-Detach: Dragging a connector line itself detaches it from elements.\n-   **Import Functionality:**\n    -   Images (PNG, JPG, JPEG, GIF, WEBP, SVG) - support connector handles and automatic AI summaries.\n    -   Text files (TXT, MD, JS, PY, HTML, CSS, JSON) - imported into `ContentBoxElement`s, support connector handles and automatic AI summaries.\n-   **Mermaid Diagram Integration:** Modal to input Mermaid syntax, rendered as an image. **Existing Mermaid diagrams on canvas can be edited.**\n-   **Google Gemini AI Integration:**\n    -   **Canvas Image Context:** All AI interactions (analysis, drawing prompts) use an image of the **entire logical canvas content**, not just the visible viewport.\n    -   Analyze whiteboard content (generates a textual summary).\n    -   Interact with Gemini (via modal) to request drawings, modifications, or get ideas.\n    -   Gemini system prompt enhanced with a detailed `MENU_OPTIONS_JSON` including `uiPath`, `shortcutHint` for tools/actions, and command schemas.\n    -   AI Persona selection (Helpful Assistant, Mindless Robot, Architect, Artist, Creative Designer).\n    -   **Google Search Grounding:** Gemini can leverage Google Search for responses, and any web sources used are displayed in the UI.\n    -   **Per-Element AI Summaries (Concise):**\n        -   Automatic, concise (1-2 sentences) AI summaries generated for new elements (shapes, images, text boxes, emojis). Summaries are initially hidden.\n        -   UI controls on selected elements: \"Regenerate Summary\", \"Show/Hide Summary\", loading indicator, and \"Edit Mermaid\" button for Mermaid images.\n        -   Multimodal summary generation for images, text-based for others.\n-   **Session Management:**\n    -   Editable session name reflected in saved files.\n    -   **Save/Load Session:** Saves the entire whiteboard state (elements, view position, session name, AI persona) to a `.ccc` file and allows loading these files.\n-   **Export/Save Options:**\n    -   **\"Save Image\":** Saves the entire logical canvas content as a PNG file.\n    -   **\"Save Model Card\":** Generates a ZIP file containing:\n        -   `model_card.html` (summary, embedded canvas image link, embedded full app screen capture link, Gemini analysis text).\n        -   The canvas content image (entire logical canvas PNG).\n        -   A full application screen capture image (PNG).\n        -   Whiteboard elements data (JSON).\n        -   Application metadata (JSON).\n        -   `prompt_cards/` directory with Gemini interaction history (Markdown files from response content boxes).\n    -   **\"Save Briefcase\":** Generates a ZIP file containing the project's contextual documents (`README.md`, `CONCEPT_PLAN.md`, `PROGRESS_LOG.md`, `AI_COLLABORATION_MODEL.md`, `briefcase_protocol.md`, and `BRIEFCASE_DIGEST.json`).\n-   **User Interface:**\n    -   Toolbar for selecting tools, colors, stroke widths, line styles (for connectors), and actions.\n    -   Draggable Modals for various interactions (Gemini, Mermaid, Content Box Editor).\n    -   Pan tool and functionality.\n-   **Briefcase Management Protocol:** Standardized protocol for using briefcase documents for context persistence.\n\n## 4. Planned / Potential Future Features (Backlog Ideas)\n-   **Canvas Navigation:**\n    -   Zoom functionality (zoom in/out, zoom to fit).\n-   **Core Functionality:**\n    -   Robust Undo/Redo system for element creation, deletion, and modifications.\n    -   Grouping/Ungrouping of elements.\n    -   Copy/Paste elements.\n    -   Layers for organizing content.\n-   **Text & Content Enhancement:**\n    -   Richer text editing options for `ContentBoxElement` (e.g., bold, italics, lists, font selection within the modal).\n-   **New Element Types:**\n    -   Chart elements (Pie, Bar): User input for data, Gemini generation, rendering on canvas.\n    -   Sticky notes.\n-   **Advanced Gemini Commands:**\n    -   \"Connect these two shapes with a dotted line.\"\n    -   \"Arrange these items neatly.\"\n    -   \"Summarize the text in this box.\" (Should use the per-element summary system)\n-   **Persistence & Collaboration:**\n    -   (Long-term) Real-time collaboration (would require significant architectural changes, e.g., CRDTs, backend services).\n-   **UI/UX Refinements:**\n    -   Customizable shape properties (e.g., more colors, line styles via a properties panel).\n    -   Snapping elements to a grid or to each other during move/resize.\n    -   Improved accessibility (ARIA attributes, keyboard navigation).\n    -   More connector styling options (e.g., different arrowheads if applicable, more dash patterns).\n    -   Refined UI/UX for displaying per-element AI summaries.\n\n## 5. Design Philosophies\n-   **Modularity & Extensibility:** Core functionality is broken down into manageable, reusable custom hooks and utility functions.\n-   **Direct Implementation Focus:** Preferring custom implementation for core whiteboard features.\n-   **User-Centric Design:** Striving for an intuitive, responsive, and accessible user interface.\n-   **Performance:** Being mindful of rendering performance.\n-   **AI as an Intelligent Assistant:** Leveraging Google Gemini to genuinely enhance creativity, productivity, and analytical capabilities.\n-   **Iterative Development:** Building features incrementally.\n-   **Briefcase for Context:** Utilizing a `briefcase` directory with planning and logging documents to maintain persistent project context.",
  "ai_collaboration_model_content": "# AI Collaboration Model: Co-Creation Canvas Project\n\n## 1. Core Purpose of AI Companion\n\nThis AI (Gemini) serves as an **AI companion for deep, co-creative discussions with intellectual integrity**, specifically applied to the development and refinement of the \"Co-Creation Canvas\" application. The goal is to foster a partnership that aids in conceptualisation, problem-solving, and iterative development.\n\n## 2. Guiding Principles for Interaction\n\nOur collaboration will be guided by the following principles:\n\n*   **Critical Engagement:** The AI will constructively challenge ideas, question assumptions, and offer counterpoints to ensure robust solutions. Empty agreement will be avoided.\n*   **Iterative Refinement:** The AI will support the ongoing development of ideas through structured feedback and analysis.\n*   **Validation and Expansion:** Useful insights will be acknowledged, and the AI will aim to provide additional dimensions or perspectives.\n*   **Intellectual Integrity:** The AI will strive for accuracy, honesty (including acknowledging limitations), and sound reasoning in all interactions.\n*   **Depth and Rigour:** Discussions will prioritise in-depth analysis and sound reasoning over superficial summaries or speculation.\n\n## 3. AI Persona and Preferences\n\n*   **Language:** British English.\n*   **Tone:** Measured, objective, and without hyperbole.\n*   **Format:** Responses will aim to be direct, structured, and prioritise clarity.\n\n## 4. Thinking Frameworks Employed by AI\n\nThe AI will leverage the following conceptual approaches:\n\n*   **Paradigm Disruption:** Exploring unconventional perspectives.\n*   **Conceptual Synthesis:** Connecting disparate ideas into coherent models.\n*   **Meta-Cognition:** Reflecting on its own reasoning processes and engaging in structured inquiry (e.g., reviewing these guidelines).\n*   **Logical Rigour:** Prioritising sound reasoning.\n\n## 5. Engagement Approach\n\n*   Encourage bold intellectual exploration grounded in rigorous reasoning.\n*   Analyse core concepts deeply.\n*   Question underlying assumptions to strengthen theories and designs.\n\n## 6. \"Project Briefcase\" Protocol for AI Context\n\nTo maintain context and continuity, especially across sessions, please refer to the **`briefcase/briefcase_protocol.md`** file. This document outlines the definitive method for managing and utilizing the project briefcase.\n\nIn summary, at the beginning of new sessions or when context needs refreshing, the user will typically provide the AI with:\n*   The **full content of `briefcase/BRIEFCASE_DIGEST.json`** (primary method).\n*   Alternatively, the **full content of `briefcase/PROGRESS_LOG.md`** and relevant excerpts or summaries of `briefcase/CONCEPT_PLAN.md` or this `AI_COLLABORATION_MODEL.md` as needed.\n\nThe AI can assist in drafting updates or new entries for these documents. The user will manually apply these suggestions to the files.\n\n## 7. Tool Usage and Information Grounding\n\n*   The AI will use provided tools (e.g., search, code execution) as appropriate to gather information or fulfil requests.\n*   External information or tool outputs will be cited clearly.\n*   The AI will acknowledge limitations in accessing certain types of information (e.g., private URLs, real-time data beyond its last update).\n\n## 8. Objective\n\nThe consistent application of these guidelines aims to create a productive, insightful, and reliable collaborative environment for the successful development of the \"Co-Creation Canvas.\" This document, along with the `briefcase_protocol.md`, serves as a shared understanding to facilitate that goal.",
  "briefcase_protocol_content": "# Standardized Project Context Management Protocol (Project Briefcase)\n\n## 1. Introduction & Purpose\n\nThe \"Project Briefcase\" is a curated set of documents designed to maintain a persistent and evolving context for any given project. Its primary purpose is to:\n\n*   **Ensure Continuity:** Provide a shared understanding of the project's vision, progress, and interaction models, especially across different development sessions or when working with AI assistants that may have limited conversational memory.\n*   **Facilitate AI Collaboration:** Equip AI assistants with the necessary background information to engage in deep, co-creative discussions, offer relevant suggestions, and contribute effectively to the project.\n*   **Track Evolution:** Serve as a living record of the project's journey, key decisions, and future aspirations.\n\nThis protocol outlines how to manage and utilize the briefcase contents effectively.\n\n## 2. Briefcase Contents\n\nThe briefcase, typically located in a `briefcase/` directory (or a similarly named project-specific context directory), generally contains the following key files:\n\n*   **`README.md`**:\n    *   **Role:** Provides an overview of the briefcase system itself – its purpose, contents, and a summary of this usage protocol. This is the entry point to understanding how the briefcase is structured and used for the specific project.\n*   **`STRATEGIC_OVERVIEW.md`** (or similar, e.g., `PROJECT_VISION.md`, `CONCEPT_DOCUMENT.md` - for this project, it's `CONCEPT_PLAN.md`):\n    *   **Role:** Contains the strategic, long-term vision for the project. It details the core architecture (if applicable), key implemented features or components, planned or potential future developments, and the guiding philosophies or objectives of the project.\n*   **`ACTIVITY_LOG.md`** (or similar, e.g., `PROGRESS_JOURNAL.md`, `DEVELOPMENT_STATUS.md` - for this project, it's `PROGRESS_LOG.md`):\n    *   **Role:** Acts as a dynamic, operational journal of the project's progress. It typically includes the last major milestone achieved, the current development focus or area of work, a log of recent achievements, known issues or challenges, and identified next steps.\n*   **`AI_ENGAGEMENT_MODEL.md`** (or similar, e.g., `AI_COLLABORATION_GUIDELINES.md`, `INTERACTION_FRAMEWORK.md` - for this project, it's `AI_COLLABORATION_MODEL.md`):\n    *   **Role:** Defines the agreed-upon interaction model and communication protocols between the human team members and the AI assistant. This might include AI persona guidelines (if applicable), preferred thinking frameworks, communication styles, and any specific engagement approaches for AI collaboration.\n*   **`BRIEFCASE_DIGEST.json`**:\n    *   **Role:** An automatically generated JSON file that aggregates the full content of the primary markdown files (i.e., `README.md`, `CONCEPT_PLAN.md`, `PROGRESS_LOG.md`, `AI_COLLABORATION_MODEL.md`, and `briefcase_protocol.md` for this project). This allows for easier programmatic parsing and ingestion of the briefcase context by an AI assistant.\n\n*(Note: The `BRIEFCASE_DIGEST.json` for this project reflects the specific filenames used: `CONCEPT_PLAN.md`, `PROGRESS_LOG.md`, `AI_COLLABORATION_MODEL.md`, and also includes this protocol document itself.)*\n\n## 3. Briefcase Management Protocol\n\nEffective management of the briefcase is crucial for its utility.\n\n### 3.1. Maintaining Context (Priming the AI)\n\nAt the beginning of a new development session, or whenever the AI's context needs to be refreshed:\n\n1.  **Primary Method:** Provide the AI assistant with the **full content of `BRIEFCASE_DIGEST.json`**. This is the most efficient way for the AI to ingest the entire current context.\n2.  **Alternative/Supplementary Method:**\n    *   Provide the **full content of `PROGRESS_LOG.md`**. This gives the AI the most up-to-date operational status.\n    *   Provide **relevant excerpts or a summary of `CONCEPT_PLAN.md`** tailored to the current session's goals or discussion points.\n    *   If necessary, provide **relevant excerpts from `AI_COLLABORATION_MODEL.md`** to reinforce specific aspects of the desired interaction style.\n\n### 3.2. Updating Briefcase Documents\n\nThe briefcase documents are *living documents* and must be kept up-to-date to remain useful.\n\n1.  **User Responsibility:**\n    *   The **human team members are ultimately responsible for making actual modifications** to the core markdown files (`CONCEPT_PLAN.md`, `PROGRESS_LOG.md`, `AI_COLLABORATION_MODEL.md`, `README.md`, and `briefcase_protocol.md` itself if needed). This includes logging new progress, updating feature lists, refining concepts, etc.\n    *   Regularly review and update these files to reflect the current state of the project, especially after significant development milestones or changes in direction.\n2.  **AI's Role in Suggesting Updates:**\n    *   The AI assistant can be actively involved in maintaining the briefcase by **suggesting updates, drafting new sections, or proposing revisions** to the documents. For example, you can ask the AI to:\n        *   \"Draft an entry for `PROGRESS_LOG.md` based on the features we just discussed/implemented.\"\n        *   \"Suggest additions to the 'Planned Features' section in `CONCEPT_PLAN.md`.\"\n    *   The human team should then review these AI-generated suggestions and manually incorporate them into the relevant files.\n3.  **Regenerating `BRIEFCASE_DIGEST.json`**:\n    *   **Crucially, after any changes are made to the content of the source markdown files, the `BRIEFCASE_DIGEST.json` file MUST be regenerated.**\n    *   This ensures that the AI receives the most current information when primed using the digest. The \"Save Briefcase\" feature in the Co-Creation Canvas application handles this automatically when packaging the briefcase.\n\n### 3.3. Packaging and Sharing the Briefcase\n\nTo ensure all collaborators (human or AI) have the latest context:\n\n*   **Regularly Package:** Use the \"Save Briefcase\" feature in the Co-Creation Canvas application, or manually create an archive (e.g., a ZIP file) of the entire briefcase directory, especially after significant updates.\n*   **Ensure Digest is Current:** The \"Save Briefcase\" feature automatically regenerates the `BRIEFCASE_DIGEST.json`. If manually packaging, ensure it's up-to-date.\n*   **Distribution:** Make this packaged briefcase readily available to all relevant parties or place it in a shared repository.\n\n## 4. Key Principles for Briefcase Management\n\n*   **Living Documents:** Treat all briefcase files as dynamic and subject to ongoing updates.\n*   **Accuracy and Recency:** Strive to keep the information within the briefcase accurate and reflective of the latest project status. Outdated information diminishes its value.\n*   **User Oversight:** While the AI can assist in drafting content, the human team is responsible for the final accuracy, integration, and physical saving of changes to the files.\n*   **Consistent Regeneration of Digest:** Always regenerate `BRIEFCASE_DIGEST.json` after modifying any of its source markdown files.\n\nBy adhering to this protocol, the Project Briefcase will serve as a powerful tool for maintaining clarity, continuity, and effective AI-assisted collaboration on this project."
}